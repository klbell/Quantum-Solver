function [] = Qsim1d()
% Yee Algorithm (ie, the first thing anyone thinks of trying)
% 1. Replace all the derivatives in Ampere’s and Faraday’s laws with finite 
% differences. Discretize space and time so that the electric and magnetic 
% fields are staggered in both space and time.
%
% 2. Solve the resulting difference equations to obtain “update equations” 
% that express the (unknown) future fields in terms of (known) past fields.
%
% 3. Evaluate the magnetic fields one time-step into the future so they are 
% now known (effectively they become past fields).
%
% 4. Evaluate the electric fields one time-step into the future so they are
% now known (effectively they become past fields).
%
% 5. Repeat the previous two steps until the fields have been obtained over 
% the desired duration.


L = 100;
N = 1000;
iterations = 5000;
x = linspace(0, L, N)';
%m = 9.11e-31;
m = 1;
dx = x(2) - x(1);

% Gaussian initial wf 
% psi = (gaussmf(x, [L/50, L/2])).*exp(-1i*100.*x);
% psi = psi / sqrt(sum(psi.*conj(psi))*dx);
% % Potential
%U = -(1.602e-19)*gaussmf(x, [L/50, L/2]);
%U = x*0;
U = 2*(x-0.5).^2;
% %v(floor(N/2):end) = (1.602e-19);
% Parameters for making intial momentum space wavefunction phi(k)
ko = 2; % Peak momentum
a = 20; % Momentum width parameter
dk = 2*pi/L; % Momentum step
km=N*dk; % Momentum limit
k=linspace(0,+km,N)'; % Momentum vector
% Make psi(x,0) from Gaussian kspace wavefunction phi(k) using
% fast fourier transform :
phi = exp(-a*(k-ko).^2).*exp(-1i*6*k.^2); % unnormalized phi(k)
psi = ifft(phi); % multiplies phi by expikx and integrates vs. x
psi = psi/sqrt(psi'*psi*dx); % normalize the psi(x,0)


% Constants
epsilon_relative = 1;
mu_relative = 1;
%hbar = 1.054571726e-34;
hbar = 1;
mu0 = 4 * pi * 1e-7; 
e0 = 8.854e-12;
n0 = sqrt(mu0/e0); % Characteristic impedance of free space
c = 1/sqrt(mu0*e0);

% Just say you cant move a space faster than a little less than c, I guess
dt =  0.01;

% This actually makes sense now
e = ones(N,1);
Lap = spdiags([e -2*e e],[-1 0 1],N,N)/dx^2;
H = -((hbar^2) / 2 / m) * Lap + spdiags(U,0,N,N);

% Exponential matrix formulation of the time evolution operator
E = expm(-1i * full(H) * dt / hbar);
% Fin-diff
for t = 1:iterations
    
%     psi_diff = x*0;
%     
%     psi_diff = imps * Lap * psi - impv * v.* psi;
    
    psi = E*psi;
    clc;
    fprintf('Percent complete: %5.2f \n',100 * t / iterations);
    figure(1)
    plot(x, psi.*conj(psi));
    
end

end